#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

rwc = $(foreach d, $(wildcard $1*), $(call rwc,$d/,$2) $(filter $(subst *,%,$2),$d))

SRC_C   	= $(call rwc, source/, *.c)
SRC_CPP 	= $(call rwc, source/, *.cpp)
SRC_DIRS := $(sort \
			$(addprefix source/, $(dir $(SRC_C:source/%.c=%.o))) \
			$(addprefix source/, $(dir $(SRC_CPP:source/%.cpp=%.o))) )

TARGETNAME   = Binj
TARGET		:= builds/nx/$(TARGETNAME)
BUILD		:= out/nx
SOURCES		:= $(SRC_DIRS)
DATA		:= data
INCLUDES	:= source include
# ROMFS		:= source/Resources

EXEFS_SRC	:= exefs

APP_TITLE   := Binj
APP_AUTHOR  := aknetk
APP_VERSION := 1.0
ICON        := meta/icon.jpg


#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH		:=	-march=armv8-a -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS		:=	-g -Werror -Wno-deprecated-declarations -O2 -ffunction-sections \
				$(ARCH) $(DEFINES)

CFLAGS		+=	$(INCLUDE) -D__SWITCH__ \
				-DSWITCH

CFLAGS		+=	-D_GLIBCXX_USE_C99_MATH_TR1 -D_LDBL_EQ_DBL

CXXFLAGS	:= 	$(CFLAGS) -fno-rtti -fno-exceptions -std=c++14

ASFLAGS		:=	-g $(ARCH)
LDFLAGS		 =	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

# SDL2 Libraries
LIBS		:=  -lSDL2_ttf -lSDL2_image -lSDL2
# Format Libraries
LIBS		+= 	-lpng -ljpeg -lwebp -lass -lfribidi -lfreetype	-lvorbisidec -logg -lmpg123 -lmodplug -lFLAC -lout123
# OpenGL Libraries
LIBS		+= 	-lglad -lGLESv2 -lEGL -lglapi -ldrm_nouveau
# FFmpeg Libraries
LIBS 		+=	-lm -lstdc++ -lc -lnosys -lavformat -lavcodec -lopus -lopusfile -lswresample -lswscale -lavutil
LIBS        +=  -lvpx
# Networking Libraries
LIBS 		+=	-lcurl -lmbedtls -lmbedx509 -lmbedcrypto
# Standard Libraries
LIBS		+=  -lz -lbz2 -lnx


LIBDIRS		:= 	$(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
ifneq ($(notdir $(BUILD)),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------


export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
					$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES			:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES			:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES		:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))


ifeq ($(strip $(CPPFILES)),)
	export LD	:=	$(CC)
else
	export LD	:=	$(CXX)
endif

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 		:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE		:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
						$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
						-I$(CURDIR)/$(BUILD)

export LIBPATHS		:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export BUILD_EXEFS_SRC := $(TOPDIR)/$(EXEFS_SRC)

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif

.PHONY: $(BUILD) clean all

all: $(BUILD)

$(BUILD):
	@mkdir -p "builds"
	@mkdir -p "builds/nx"
	@mkdir -p "out"
	@mkdir -p "out/nx"
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.nx

clean:
	@rm -fr $(BUILD) $(TARGET).pfs0 $(TARGET).nso $(TARGET).nro $(TARGET).nacp $(TARGET).elf


else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
all	:	$(OUTPUT).pfs0 $(OUTPUT).nro

$(OUTPUT).pfs0	:	$(OUTPUT).nso

$(OUTPUT).nso	:	$(OUTPUT).elf

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

$(OUTPUT).elf	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

%.bin.o	:	%.bin
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

endif
